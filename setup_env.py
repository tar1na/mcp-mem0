#!/usr/bin/env python3
"""
Setup script to help configure environment variables for mcp-mem0.
This script will guide you through setting up the required environment variables.
"""

import os
import sys
from pathlib import Path

def get_input(prompt, default=None, required=False):
    """Get user input with optional default value."""
    if default:
        prompt = f"{prompt} [{default}]: "
    else:
        prompt = f"{prompt}: "
    
    while True:
        value = input(prompt).strip()
        if value:
            return value
        elif default and not required:
            return default
        elif required:
            print("This field is required. Please provide a value.")
        else:
            return ""

def main():
    print("=== mcp-mem0 Environment Setup ===\n")
    print("This script will help you set up the required environment variables.")
    print("You can also manually create a .env file based on env.example\n")
    
    # Check if .env already exists
    env_file = Path(".env")
    if env_file.exists():
        print("‚ö†Ô∏è  .env file already exists!")
        overwrite = input("Do you want to overwrite it? (y/N): ").strip().lower()
        if overwrite != 'y':
            print("Setup cancelled.")
            return
    
    # Get configuration values
    print("\n--- LLM Configuration ---")
    llm_provider = get_input(
        "LLM Provider (openai, openrouter, or ollama)", 
        "openai", 
        required=True
    )
    
    llm_api_key = get_input(
        "LLM API Key", 
        required=True
    )
    
    llm_model = get_input(
        "LLM Model", 
        "gpt-3.5-turbo" if llm_provider in ["openai", "openrouter"] else "llama3.2:3b",
        required=True
    )
    
    embedding_model = get_input(
        "Embedding Model", 
        "text-embedding-3-small" if llm_provider in ["openai", "openrouter"] else "nomic-embed-text"
    )
    
    if llm_provider == "ollama":
        llm_base_url = get_input(
            "Ollama Base URL", 
            "http://localhost:11434"
        )
    
    print("\n--- Database Configuration ---")
    database_url = get_input(
        "Database URL (Supabase connection string)", 
        required=True
    )
    
    print("\n--- Server Configuration ---")
    host = get_input("Server Host", "0.0.0.0")
    port = get_input("Server Port", "8050")
    transport = get_input("Transport Method (sse or stdio)", "sse")
    
    print("\n--- User Configuration ---")
    default_user_id = get_input("Default User ID (optional)", "default_user")
    default_agent_id = get_input("Default Agent ID (optional)", "default_agent")
    default_app_id = get_input("Default App ID (optional)", "default_app")
    
    # Generate .env content
    env_content = f"""# Environment configuration for mcp-mem0
# Generated by setup_env.py

# =============================================================================
# User and application identifiers
# =============================================================================
DEFAULT_USER_ID={default_user_id}
DEFAULT_AGENT_ID={default_agent_id}
DEFAULT_APP_ID={default_app_id}

# =============================================================================
# Server Configuration
# =============================================================================
HOST={host}
PORT={port}
TRANSPORT={transport}

# =============================================================================
# Mem0 Configuration
# =============================================================================
LLM_PROVIDER={llm_provider}
LLM_API_KEY={llm_api_key}
LLM_CHOICE={llm_model}
EMBEDDING_MODEL_CHOICE={embedding_model}
"""
    
    if llm_provider == "ollama":
        env_content += f"LLM_BASE_URL={llm_base_url}\n"
    
    env_content += f"""
# =============================================================================
# Database Configuration
# =============================================================================
DATABASE_URL={database_url}

# =============================================================================
# Development Settings
# =============================================================================
DEBUG=true
LOG_LEVEL=DEBUG
"""
    
    # Write .env file
    try:
        with open(env_file, 'w') as f:
            f.write(env_content)
        print(f"\n‚úÖ .env file created successfully!")
        print(f"üìÅ Location: {env_file.absolute()}")
        
        print("\nüìã Next steps:")
        print("1. Review the .env file to ensure all values are correct")
        print("2. Start the MCP server: python -m src.main")
        print("3. Test the connection with one of the MCP tools")
        
    except Exception as e:
        print(f"\n‚ùå Error creating .env file: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
